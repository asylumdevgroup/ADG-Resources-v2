plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21+, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

// Include resources generated by data generators, but exclude stale Forge biome modifiers and Finder markers
sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
            exclude 'data/asylumresources/forge/biome_modifier/**'
            exclude '**/*.gitFinderDeleted*'
        }
    }
}

repositories {
    mavenLocal()
    maven { url = "https://cursemaven.com" }
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases/'
    }
    maven {
        name = "LWJGL"
        url = "https://repo.lwjgl.org/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
}

// Ensure a single ASM version is used across classpath and module path to avoid conflicts during runData
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.ow2.asm' && details.requested.version != '9.7') {
            details.useVersion '9.7'
            details.because 'Align all ASM deps to 9.7 to prevent mixed versions on classpath/module path'
        }
    }
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(
            'Specification-Title': 'asylumresources',
            'Specification-Vendor': 'furtabs',
            'Specification-Version': '1',
            'Implementation-Title': project.name,
            'Implementation-Version': archiveVersion,
            'Implementation-Vendor': 'furtabs',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// Configure run configurations (NeoGradle 7)
runs {
    data {
        workingDirectory project.file('runs/data')
        // Direct datagen output into src/generated/resources and use existing main resources for merging
        programArguments.addAll(
                '--mod', mod_id,
                '--all',
                '--existing', project.file('src/main/resources').absolutePath,
                '--output', project.file('src/generated/resources').absolutePath
        )
    }
}

// Optional: auto-run datagen during build when -Pdatagen=true is passed
if (project.hasProperty('datagen')) {
    tasks.named('processResources').configure {
        dependsOn(tasks.named('runData'))
    }
}